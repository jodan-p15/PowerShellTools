<#
  !!! IN DEVELOPMENT !!!
  .SYNOPSIS
    This tool gathers network Transmission Control Protocol (TCP) communications and system processes running then correlates the data.

  .DESCRIPTION
    The tool with execute two (2) PowerShell commands;
      Get-NetTCPConnection
      Get-WmiObject -Class Win32_Process

  .NOTES
    This tool will assist with:
      Implementing host-based firewall
      Investigating anomalous and suspicious
      Troubleshooting host network communication

    The '@{n='CreationDate';e={$_.ConvertToDateTime($_.CreationDate)}}' table apart of the Get-WmiObject Win32_Process command is to covert epoch to Human readable format.

  .EXAMPLES
    Format the information in a human readable format
      Get-NetworkTCPProcess | Format-Table

    Sort objects by local port and format the information in a human reable format
      Get-NetworkTCPProcess | Sort-Object Local.Port | Format-Table

    Sort objects by local port and export to comma seperated value (CSV) file
      Get-NetworkTCPProcess | Sort-Object Local.Port | Export-Csv example.csv
    
#>

function Get-NetworkTCPProcess {
  $systemTCPCommunication = Get-NetTCPConnection
  $systemProcesses = Get-WmiObject Win32_Process | Select-Object Name,ProcessID,ParentProcessID,@{n='CreationDate';e={$_.ConvertToDateTime($_.CreationDate)}}
  $consolidatedInformation = @()

  foreach ($communication in $systemTCPCommunication){
    $communicationProcess = $systemProcesses | Where-Object ProcessID -eq $communication.OwningProcess

    $consolidatedInformation += [PSCustomObject] @{
      'service.state' = $communication.State
      'local.ip' = $communication.LocalAddress
      'local.port' = $communication.LocalPort
      'remote.ip' = $communication.RemoteAddress
      'remote.port' = $communication.RemotePort
      'process.name' = $communicationProcess.Name
      'process.id' = $communication.OwningProcess
      'process.start' = $communicationProcess.CreationDate
    }
  }
  return $consolidatedInformation
}
